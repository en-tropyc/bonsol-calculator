// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { InputType } from './input-type.js';


export class Input implements flatbuffers.IUnpackableObject<InputT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Input {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsInput(bb:flatbuffers.ByteBuffer, obj?:Input):Input {
  return (obj || new Input()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsInput(bb:flatbuffers.ByteBuffer, obj?:Input):Input {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Input()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

inputType():InputType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : InputType.PublicData;
}

mutate_input_type(value:InputType):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint8(this.bb_pos + offset, value);
  return true;
}

data(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

dataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

dataArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startInput(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addInputType(builder:flatbuffers.Builder, inputType:InputType) {
  builder.addFieldInt8(0, inputType, InputType.PublicData);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, dataOffset, 0);
}

static createDataVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endInput(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createInput(builder:flatbuffers.Builder, inputType:InputType, dataOffset:flatbuffers.Offset):flatbuffers.Offset {
  Input.startInput(builder);
  Input.addInputType(builder, inputType);
  Input.addData(builder, dataOffset);
  return Input.endInput(builder);
}

unpack(): InputT {
  return new InputT(
    this.inputType(),
    this.bb!.createScalarList<number>(this.data.bind(this), this.dataLength())
  );
}


unpackTo(_o: InputT): void {
  _o.inputType = this.inputType();
  _o.data = this.bb!.createScalarList<number>(this.data.bind(this), this.dataLength());
}
}

export class InputT implements flatbuffers.IGeneratedObject {
constructor(
  public inputType: InputType = InputType.PublicData,
  public data: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const data = Input.createDataVector(builder, this.data);

  return Input.createInput(builder,
    this.inputType,
    data
  );
}
}
