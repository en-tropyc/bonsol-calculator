// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ProgramInputType } from './program-input-type.js';


export class DeployV1 implements flatbuffers.IUnpackableObject<DeployV1T> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DeployV1 {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDeployV1(bb:flatbuffers.ByteBuffer, obj?:DeployV1):DeployV1 {
  return (obj || new DeployV1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDeployV1(bb:flatbuffers.ByteBuffer, obj?:DeployV1):DeployV1 {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DeployV1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

owner(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

ownerLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

ownerArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

imageId():string|null
imageId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
imageId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

programName():string|null
programName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
programName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

url():string|null
url(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
url(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

size():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

mutate_size(value:bigint):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint64(this.bb_pos + offset, value);
  return true;
}

inputs(index: number):ProgramInputType|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

inputsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

inputsArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startDeployV1(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addOwner(builder:flatbuffers.Builder, ownerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, ownerOffset, 0);
}

static createOwnerVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startOwnerVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addImageId(builder:flatbuffers.Builder, imageIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, imageIdOffset, 0);
}

static addProgramName(builder:flatbuffers.Builder, programNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, programNameOffset, 0);
}

static addUrl(builder:flatbuffers.Builder, urlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, urlOffset, 0);
}

static addSize(builder:flatbuffers.Builder, size:bigint) {
  builder.addFieldInt64(4, size, BigInt('0'));
}

static addInputs(builder:flatbuffers.Builder, inputsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, inputsOffset, 0);
}

static createInputsVector(builder:flatbuffers.Builder, data:ProgramInputType[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startInputsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endDeployV1(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishDeployV1Buffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedDeployV1Buffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createDeployV1(builder:flatbuffers.Builder, ownerOffset:flatbuffers.Offset, imageIdOffset:flatbuffers.Offset, programNameOffset:flatbuffers.Offset, urlOffset:flatbuffers.Offset, size:bigint, inputsOffset:flatbuffers.Offset):flatbuffers.Offset {
  DeployV1.startDeployV1(builder);
  DeployV1.addOwner(builder, ownerOffset);
  DeployV1.addImageId(builder, imageIdOffset);
  DeployV1.addProgramName(builder, programNameOffset);
  DeployV1.addUrl(builder, urlOffset);
  DeployV1.addSize(builder, size);
  DeployV1.addInputs(builder, inputsOffset);
  return DeployV1.endDeployV1(builder);
}

unpack(): DeployV1T {
  return new DeployV1T(
    this.bb!.createScalarList<number>(this.owner.bind(this), this.ownerLength()),
    this.imageId(),
    this.programName(),
    this.url(),
    this.size(),
    this.bb!.createScalarList<ProgramInputType>(this.inputs.bind(this), this.inputsLength())
  );
}


unpackTo(_o: DeployV1T): void {
  _o.owner = this.bb!.createScalarList<number>(this.owner.bind(this), this.ownerLength());
  _o.imageId = this.imageId();
  _o.programName = this.programName();
  _o.url = this.url();
  _o.size = this.size();
  _o.inputs = this.bb!.createScalarList<ProgramInputType>(this.inputs.bind(this), this.inputsLength());
}
}

export class DeployV1T implements flatbuffers.IGeneratedObject {
constructor(
  public owner: (number)[] = [],
  public imageId: string|Uint8Array|null = null,
  public programName: string|Uint8Array|null = null,
  public url: string|Uint8Array|null = null,
  public size: bigint = BigInt('0'),
  public inputs: (ProgramInputType)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const owner = DeployV1.createOwnerVector(builder, this.owner);
  const imageId = (this.imageId !== null ? builder.createString(this.imageId!) : 0);
  const programName = (this.programName !== null ? builder.createString(this.programName!) : 0);
  const url = (this.url !== null ? builder.createString(this.url!) : 0);
  const inputs = DeployV1.createInputsVector(builder, this.inputs);

  return DeployV1.createDeployV1(builder,
    owner,
    imageId,
    programName,
    url,
    this.size,
    inputs
  );
}
}
