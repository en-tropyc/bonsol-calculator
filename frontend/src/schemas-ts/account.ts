// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class Account implements flatbuffers.IUnpackableObject<AccountT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Account {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

writable():number {
  return this.bb!.readUint8(this.bb_pos);
}

mutate_writable(value:number):boolean {
  this.bb!.writeUint8(this.bb_pos + 0, value);
  return true;
}

pubkey(index: number):number|null {
    return this.bb!.readUint8(this.bb_pos + 1 + index);
}

static sizeOf():number {
  return 40;
}

static createAccount(builder:flatbuffers.Builder, writable: number, pubkey: number[]|null):flatbuffers.Offset {
  builder.prep(8, 40);
  builder.pad(7);

  for (let i = 31; i >= 0; --i) {
    builder.writeInt8((pubkey?.[i] ?? 0));

  }

  builder.writeInt8(writable);
  return builder.offset();
}


unpack(): AccountT {
  return new AccountT(
    this.writable(),
    this.bb!.createScalarList<number>(this.pubkey.bind(this), 32)
  );
}


unpackTo(_o: AccountT): void {
  _o.writable = this.writable();
  _o.pubkey = this.bb!.createScalarList<number>(this.pubkey.bind(this), 32);
}
}

export class AccountT implements flatbuffers.IGeneratedObject {
constructor(
  public writable: number = 0,
  public pubkey: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return Account.createAccount(builder,
    this.writable,
    this.pubkey
  );
}
}
